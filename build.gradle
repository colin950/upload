plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //logback
    implementation group: 'ch.qos.logback.contrib', name: 'logback-jackson', version: '0.1.2'
    implementation group: 'ch.qos.logback.contrib', name: 'logback-json-classic', version: '0.1.5'
    // condition 사용을 위해
    implementation group: 'org.codehaus.janino', name: 'janino', version: '2.6.1'

    // swagger
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2")

    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64'

    // redis
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis'


    // H2 Database
    implementation 'com.h2database:h2'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

    //aws
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.888'
//    implementation group: 'com.amazonaws', name: 'aws-java-sdk-secretmanager', version: '1.11.656'

    // jwt and cryptography
    implementation("com.nimbusds:nimbus-jose-jwt:7.9")
    implementation("io.jsonwebtoken:jjwt-api:0.10.5")
    implementation("io.jsonwebtoken:jjwt-impl:0.10.5")
    implementation("io.jsonwebtoken:jjwt-jackson:0.10.5")

    //modelmapper
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.8'

    // querydsl JPAAnnotationProcessor
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")

    // 해당 servlet이 필요할때는 넣어서 사용하기도 함 (구버전 라이브러리)
//    implementation "javax.servlet:javax.servlet-api:3.0.1"

    compileOnly 'org.projectlombok:lombok'
//    runtimeOnly 'mysql:mysql-connector-java'
//    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'io.projectreactor:reactor-test'

    // ffmpeg
    implementation("net.bramp.ffmpeg:ffmpeg:0.7.0")

    // 외부 라이브러리를 넣어서 사용하게 되어야 될경우 자동 컴파일
    compileOnly fileTree(dir: 'libs', include: ['*.jar'])
}

tasks.named('test') {
    useJUnitPlatform()
}

ext.profile = (!project.hasProperty('profile') || !profile) ? 'local' : profile

def queryDslGenerated = "src/main/generated"

sourceSets {
    main.resources.srcDirs = [
            "src/main/resources",
//            "src/main/resources-${profile}"
    ]
    main.java.srcDirs += [queryDslGenerated]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(queryDslGenerated)
    processResources {
        duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.INCLUDE
    }
}

clean.doLast {
    file(queryDslGenerated).deleteDir()
}
